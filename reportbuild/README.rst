==============================
Report generation rst tutorial 
==============================

The report generation program parses and reads rst (ReStructuredText) documents and generates
a report in the following formats:
   - html,
   - latex
   - pdf (building first in latex and then calling `pdflatex`, which must be installed)

reStructuredText is plaintext that uses simple and intuitive constructs to indicate the structure of
a document. These constructs are equally easy to read in raw and processed forms.
This document is itself an example of reStructuredText (raw, if you are reading the text file,
or processed, if you are reading an HTML document, for example).
This program uses Sphinx which in turn works on Docutils, which is the python library implementing
the RestructuredText parser

The following tutorial is a quick reference to rst format, i.e., how to write the most common 
operations for generating an .rst file. For a more detailed description, see:
   - http://docutils.sourceforge.net/docs/user/rst/quickref.html (docutils quick rst reference)
   - http://www.sphinx-doc.org/en/stable/rest.html (sphinx quick rst reference)
   - http://www.sphinx-doc.org/en/stable/markup/index.html#sphinxmarkup (sphinx more detailed)

In addition to those links, note that:
Fields (e.g., ``\:authors:\ Mark Twain``) are used internally to denote latex newcommands, and they
will NOT be rendered in the latex document (in the html document they will). As a rst writer this is
not relevant. On the other hand, keep in mind that they work also as a substitution text. I.e., one
can reference them throughout the document with ``\|authors\|`` (which will be rendered in this case
as "Mark Twain")

The dollar sign ``$x=9$`` is recognized as in latex.

To make typing faster, sections can also be typed in "markdown symbols" with preceeding '#', e.g.:
``# Report title``, ``## Report chapter``, ``### Report section`` etcetera. However, do not mix up
the two styles. The program simply checks the existence of markdown symbols and, before calling the
Docutils parser, converts them as follows:
   
   Markdown symbol rst symbol        **coventionally** assigned for (i.e., it's not mandatory)
   =============== ================= =========================================================
   #               # (with overline) parts
   ##              * (with overline) chapters
   ###             =                 sections
   ####            -                 subsections
   #####           ^                 subsubsections
   ######          "                 paragraphs

Simple markups
--------------

  Type            Rendered as:
  =============== ============
  \*\*strong\*\*  **strong**
  \*emphasis\*    *emphasis*

Hyperlinks
----------

Set up a link definition:
``.. [link_name]: [link_url]``, example: ``.. _Python: http://www.python.org/``

So that you can reference it throughout the document by writing:
``Python_``

(note: the reference can come before its definition in the document)

The latter is rendered as an hyperlink (in wither pdf or html) like this:

.. _Python: http://www.python.org/

Python_

Figures and Tables numeric references
-------------------------------------

You type *before* a figure or table directive (see below) the
``.. _[label_name]:``, e.g. ``.. _stations_figure:``

Then you type Enter twice (i.e., there must be a blank line) before writing yoiur figure
directive

Then, you can reference to it as: 
:numref:`stations_figure`

which will be rendered as ``Fig.#`` (depending on the numbers of figure) with a hyperlink


Footnotes
---------

Notes: The documentation says "they might be
rearranged" but it does not explain with which logic. A full use case has not been tested

Footnotes (autonumbering). Type:
  
``.. [#] First footnote, should be numbered as 1``

``.. [#] Second footnote, should be numbered as 2``

And then reference to them in the text as ``[#]_``:
``Here a ref to the first footnote [#]_ and here to the second [#]_.``

The latter should be rendered as:

Footnotes (autonumbering). Type:
  
``.. [#] First footnote, should be numbered as 1``

``.. [#] Second footnote, should be numbered as 2``

And then reference to them in the text as ``[#]_``:
``Here a ref to the first footnote [#]_ and here to the second [#]_.``


Footnotes (autonsymbols). Type:
  
``.. [*] First footnote, should use the "first" autogenerated symbol``

``.. [*] Second footnote, should use the "second" autogenerated symbol``

And then reference to them in the text as ``[#]_``:
``Here a ref to the first footnote [*]_ and here to the second [*]_.``

The latter is rendered as 
.. [*] First footnote, should use the "first" autogenerated symbol

.. [*] Second footnote, should use the "second" autogenerated symbol

Here a ref to the first footnote [*]_ and here to the second [*]_.


Citations
---------

Notes: The documentation says "they might be
rearranged" but it does not explain with which logic. A full use case has not been tested.
**TODO**: latex output should be generated and integrated potentially with bibliography


They behaves like footnotes. FIXME: rearrange them in latex!!

``.. [cit_name] url or text``

And then reference to them like this ``[cit_name]_``

Example:

``.. [CIT2002] Deep India meets deep Asia: Lithospheric indentation, delamination and break-off under
     Pamir and Hindu Kush (Central Asia). http://doi.org/10.1016/j.epsl.2015.11.046``

``[CIT2002]_. And here another referrence to [CIT2002]_``

The latter should be rendered as:

.. [CIT2016] Deep India meets deep Asia: Lithospheric indentation, delamination and break-off under
     Pamir and Hindu Kush (Central Asia). http://doi.org/10.1016/j.epsl.2015.11.046

[CIT2016]_. And here another referrence to [CIT2016]_


Substitutions
-------------

Setup a substitution definition like this:
``.. |substitution_name| replace:: substitution_text``, e.g.: 
``.. |RST| replace:: reStructuredText``

So that when you type in the document:
``|RST|``
It will be rendered as:
``reStructuredText``

Sphinx provides also three substitutions by default: 
``|release|``
Replaced by the project release the documentation refers to. This is meant to be the full version
string including alpha/beta/release candidate tags, e.g. 2.5.2b3. Set by release.

``|version|``
Replaced by the project version the documentation refers to. This is meant to consist only of the
major and minor version parts, e.g. 2.5, even for version 2.5.1. Set by version.

``|today|``
Replaced by either todayâ€™s date (the date on which the document is read), or the date set in the
build configuration file. Normally has the format April 14, 2007. Set by today_fmt and today.

FIXME: implement this:

``|today_year|`` same as today, but it displays the year only (e.g., 2006)

``|this|`` gives the full citation of this report. It is build on 
authors + title + today_year + doi


Notes
*****

 1. You can combine substitutions and hyperlinks like this. Define first a substitution:
    ``.. |RST| replace:: reStructuredText``
    And then a hyperlink:
    ``.. _RST: http://docutils.sourceforge.net/rst.html``
    So that when you type: ``|RST|_`` it will be rendered as ``http://docutils.sourceforge.net/rst.html``
 
 2. In this program, bibliographic fields (i.e., portion of text starting and ending with a
    semicolon and followed by indented text, such as ``:authors: Mark Twain``) are automatically set as
    substitutions string, so that typing ``|authors|`` will be rendered as ``Mark Twain``
      
 


Directives
----------

images
figures
tables (csv and normal, warn about gotchas)
map-image
map-figure
images-grid (which is a TABLE!)

   


