'''
Created on Jun 19, 2016

@author: riccardo
'''
import os
import sys
import glob
from click.testing import CliRunner
from reportgen.network.generator.main import main as reportgen_main
from reportbuild.main import run as reportbuild_run
import shutil
from cStringIO import StringIO

CURRENT_ERR_MSG = ""

def test_all():
    sourcedir = os.path.join(os.path.abspath(os.path.dirname(__file__)), "testdata")
    args = [
            ['ZE', 2014, "instr_uptimes-/*", "data_aval/*", "noise_pdf/sta1*.pdf", 1],
            ['??', 2012, "instr_uptimes-/*", "data_aval/*", "noise_pdf/sta1*.pdf", 1],
            ['??', 2014, "instr_uptimes/*", "data_aval/*", "noise_pdf/sta1*.pdf", 1],
            ['ZE', 2012, "instr_uptimes/*", "data_aval/*", "noise_pdf/sta1*.pdf", 1],
            ['ZE', 2012, "instr_uptimes-/*", "data_aval/*", "noise_pdf/*", 1],
            ['ZE', 2012, "instr_uptimes/x1.png", "data_aval/x2.png", "noise_pdf/sta1*.png", 0],
            ]

    for a in args:
        for i in xrange(2, len(a)-1):
            a[i] = os.path.join(sourcedir, a[i])

    print "RUNNING (FUNCTIONAL) TESTS"
    print "=========================="
    print ""

    runner = CliRunner()
    with runner.isolated_filesystem():
        mydir = os.getcwd()  # generated by the isolated filesystem

        print "this dir: %s " % sourcedir
        print "Created temp dir: '%s'" % mydir
        try:
            for a in args:  # args[:-1]:
                print "-------------------------------------------------------"
                print "arguments: %s" % str(a)
                # continue
                # sys.stdout, sys.stderr = StringIO(), StringIO()
                expected_exist_status = a[-1]
                a.insert(0, os.path.join(mydir, a[0]))
                a.append(runner)
                print ""
                srcdir = test_rgen(*a)
                builddir = os.path.join(mydir, a[0]+"_build")
                print ""
                bdir = test_rbuild(srcdir, builddir, expected_exist_status)
                # sys.stdout, sys.stderr = tmp1, tmp2
                for rem in [srcdir, bdir]:
                    if os.path.isdir(rem):
                        shutil.rmtree(rem, ignore_errors=True)
                        if not os.path.isdir(rem):
                            print "Removed path '%s'" % rem
                        else:
                            print "Warning: '%s' not removed" % rem

                print ""
                print "+-----------------+"
                print "| SUB-TEST WAS OK |"
                print "+-----------------+"
                print ""
        except Exception as exc_:
            print ""
            print str(exc_)
            print "TEST Failed"
            if CURRENT_ERR_MSG:
                print "while executing:"
                print CURRENT_ERR_MSG
            print ""
            # raise
        finally:
            # sys.stdout, sys.stderr = tmp1, tmp2
            shutil.rmtree(mydir, ignore_errors=True)
            if not os.path.isdir(mydir):
                print "(Removed path '%s')" % mydir
            else:
                print "(Warning: '%s' not removed)" % mydir

    print ""
    print ""
    print "ALL TESTS RUN SUCCESFULLY"
    print "====================="


def test_rgen(outdir, network, year, inst_uptimes, data_aval, noise_pdf, expected_exit_code,
              cli_runner=None):
    # expected_exit_code: 0 for success, 1 for failure (or something else than zero)

    print "Generating a test report"
    print "outdir '%s'" % outdir
    
    runner = CliRunner() if cli_runner is None else cli_runner
    ddd = os.path.abspath(os.path.dirname(__file__))
    opts = {
            "--inst_uptimes": os.path.join(ddd, inst_uptimes),
            "--data_aval": os.path.join(ddd, data_aval),
            "--noise_pdf": os.path.join(ddd, noise_pdf),
           }

    def_args = [network, str(year)]  # FIXME: with 2014 IS EMPTY! TEST IT!

    args = []
    args.extend(item
                for pair in opts.iteritems()
                for item in pair)

    args.append("--out_path")
    args.append(outdir)
    if os.path.isdir(outdir):
        raise ValueError("'%s' already exist, please delete directory")

    args.extend(def_args)

    global CURRENT_ERR_MSG
    CURRENT_ERR_MSG = str(reportgen_main) + " " + str(args)
    result = runner.invoke(reportgen_main, args, catch_exceptions=False)

    ext_code = result.exit_code
    print "Expecting exit code %d" % expected_exit_code
    assert ext_code == expected_exit_code

    if ext_code == 0:
        assert os.path.isdir(outdir)
        for opt in opts:
            assert os.path.isdir(os.path.join(outdir, "data", opt[2:]))

        for opt in opts:
            assert filelen(os.path.join(outdir, "data", opt[2:])) == filelen(opts[opt])
    
    CURRENT_ERR_MSG = ""
    print "Generating a test report: Ok"
    return outdir


def filelen(arg):
    if os.path.isfile(arg):
        return 1
    elif os.path.isdir(arg):
        return len(os.listdir(arg))
    else:
        return len(glob.glob(arg))


def test_rbuild(sourcedir, builddir, expected_exit_status):
    print "Building a test report"
    print "srcdir '%s'" % sourcedir
    print "builddir '%s'" % builddir
    global CURRENT_ERR_MSG
    # builddir = os.path.join(os.path.dirname(sourcedir), os.path.basename(sourcedir)+"_build")
    if os.path.isdir(builddir):
        raise ValueError("'%s' already exists, cannot build in there")
    # os.makedirs(builddir)
    for build in ("html", "latex", "pdf"):
        bdir = os.path.join(builddir, build)
        print "   Building test report for '%s'" % build
        args_ = ["reportbuild", sourcedir, bdir, "-b", build]
        CURRENT_ERR_MSG = str(args_)
        ret = reportbuild_run(args_)
        assert ret == expected_exit_status
        if expected_exit_status == 0:  # success
            assert os.path.isdir(bdir)
            ext = "tex" if build == 'latex' else build
            assert len(glob.glob(os.path.join(bdir, "*.%s" % ext))) > 0
        CURRENT_ERR_MSG = ""
    print "Building a test report: Ok"
    return builddir

if __name__ == '__main__':
    test_all()
